null = None
#\#/#\#/#\#/#\#/#\#/#\#/#\#/#\#/#\#/#\#/

funct_doc = {
  "all_sample_names": "Return a list of all the sample names available",
  "chord": "Creates an immutable ring of Midi note numbers when given a tonic note and a chord type. If only passed a chord type, will default the tonic to 0. See examples.",
  "chord_degree": "In music we build chords from scales. For example, a C major chord is made by taking the 1st, 3rd and 5th notes of the C major scale (C, E and G). If you do this on a piano you might notice that you play one, skip one, play one, skip one etc. If we use the same spacing and start from the second note in C major (which is a D), we get a D minor chord which is the 2nd, 4th and 6th notes in C major (D, F and A). We can move this pattern all the way up or down the scale to get different types of chords. `chord_degree` is a helper method that returns a ring of midi note numbers when given a degree (starting point in a scale) which is a symbol `:i`, `:ii`, `:iii`, `:iv`, `:v`, `:vi`, `:vii` or a number `1`-`7`. The second argument is the tonic note of the scale, the third argument is the scale type and finally the fourth argument is number of notes to stack up in the chord. If we choose 4 notes from degree `:i` of the C major scale, we take the 1st, 3rd, 5th and 7th notes of the scale to get a C major 7 chord.",
  "chord_invert": "Given a set of notes, apply a number of inversions indicated by the `shift` parameter. Inversions being an increase to notes if `shift` is positive or decreasing the notes if `shift` is negative.\n",
  "chord_names": "Returns a ring containing all chord names known to Sonic Pi",
  "control": "Control a running synth node by passing new parameters to it. A synth node represents a running synth and can be obtained by assigning the return value of a call to play or sample or by specifying a parameter to the do/end block of an FX. You may modify any of the parameters you can set when triggering the synth, sample or FX. See documentation for opt details. If the synth to control is a chord, then control will change all the notes of that chord group at once to a new target set of notes - see example. Also, you may use the on: opt to conditionally trigger the control - see the docs for the `synth` and `sample` fns for more information.\n",
  "current_arg_checks": "Returns the current arg checking setting (`true` or `false`).\n",
  "current_cent_tuning": "Returns the cent shift value.\n",
  "current_debug": "Returns the current debug setting (`true` or `false`).\n",
  "current_octave": "Returns the octave shift value.\n",
  "current_sample_defaults": "Returns the current sample defaults. This is a map of synth arg names to either values or functions.\n",
  "current_sched_ahead_time": "Returns the current schedule ahead time.\n",
  "current_synth": "Returns the current synth name.\n",
  "current_synth_defaults": "Returns the current synth defaults. This is a map of synth arg names to either values or functions.\n",
  "current_transpose": "Returns the current transpose value.\n",
  "current_volume": "Returns the current volume.\n",
  "degree": "For a given scale and tonic it takes a symbol `:i`, `:ii`, `:iii`, `:iv`,`:v`, `:vi`, `:vii` or a number `1`-`7` and resolves it to a midi note.",
  "fx_names": "Return a list of all the FX available",
  "hz_to_midi": "Convert a frequency in hz to a midi note. Note that the result isn't an integer and there is a potential for some very minor rounding errors.",
  "kill": "Kill a running synth sound or sample. In order to kill a sound, you need to have stored a reference to it in a variable.",
  "load_sample": "Given a path to a `.wav`, `.wave`, `.aif`, `.aiff` or `.flac` file, pre-loads the sample into memory.\n",
  "load_samples": "Given a directory containing multiple `.wav`, `.wave`, `.aif`, `.aiff` or `.flac` files, pre-loads all the samples into memory.\n",
  "load_synthdefs": "Load all pre-compiled synth designs in the specified directory. The binary files containing synth designs need to have the extension `.scsyndef`. This is useful if you wish to use your own SuperCollider synthesiser designs within Sonic Pi.\n",
  "midi_to_hz": "Convert a midi note to hz",
  "note": "Takes a midi note, a symbol (e.g. `:C`) or a string (e.g. `\\",
  "note_range": "Produces a ring of all the notes between a low note and a high note. By default this is chromatic (all the notes) but can be filtered with a pitches: argument. This opens the door to arpeggiator style sequences and other useful patterns. If you try to specify only pitches which aren't in the range it will raise an error - you have been warned!",
  "octs": "Create a ring of successive octaves starting at `start` for `num_octaves`. ",
  "pitch_to_ratio": "Convert a midi note to a ratio which when applied to a frequency will scale the frequency by the number of semitones. Useful for changing the pitch of a sample by using it as a way of generating the rate.",
  "play": "Play note with current synth. Accepts a set of standard options which include control of an amplitude envelope with `attack:`, `decay:`, `sustain:` and `release:` phases. These phases are triggered in order, so the duration of the sound is attack + decay + sustain + release times. The duration of the sound does not affect any other notes. Code continues executing whilst the sound is playing through its envelope phases.\n",
  "play_chord": "Play a list of notes at the same time.\n",
  "play_pattern": "Play list of notes with the current synth one after another with a sleep of 1\n",
  "play_pattern_timed": "Play each note in a list of notes one after another with specified times between them. The notes should be a list of MIDI numbers, symbols such as :E4 or chords such as chord(:A3, :major) - identical to the first parameter of the play function. The times should be a list of times between the notes in beats.\n",
  "ratio_to_pitch": "Convert a frequency ratio to a midi note which when added to a note will transpose the note to match the frequency ratio.",
  "recording_delete": "The master mixer is the final mixer that all sound passes through. This fn resets it to its default set - undoing any changes made via set_mixer_control!",
  "recording_save": "Save previous recording to the specified location",
  "recording_start": "Start recording all sound to a `.wav` file stored in a temporary directory.",
  "recording_stop": "Stop current recording.",
  "rest?": "Given a note or an args map, returns true if it represents a rest and false if otherwise",
  "sample_buffer": "Alias for the `load_sample` method. Loads sample if necessary and returns buffer information.",
  "sample_free_all": "Unloads all samples therefore freeing the memory and resources consumed. Subsequent calls to `sample` and friends will re-load the sample on the server.",
  "sample_groups": "Return a list of all the sample groups available",
  "sample_info": "Alias for the `load_sample` method. Loads sample if necessary and returns sample information.",
  "sample_names": "Return a ring of sample names for the specified group",
  "sample_paths": "Accepts the same pre-args and opts as `sample` and returns a ring of matched sample paths.",
  "scale_names": "Returns a ring containing all scale names known to Sonic Pi",
  "set_cent_tuning!": "Globally tune Sonic Pi to play with another external instrument.\n",
  "set_control_delta!": "Specify how many seconds between successive modifications (i.e. trigger then controls) of a specific node on a specific thread. Set larger if you are missing control messages sent extremely close together in time.",
  "set_mixer_control!": "The master mixer is the final mixer that all sound passes through. This fn gives you control over the master mixer allowing you to manipulate all the sound playing through Sonic Pi at once. For example, you can sweep a lpf or hpf over the entire sound. You can reset the controls back to their defaults with `reset_mixer!`.",
  "set_sched_ahead_time!": "Specify how many seconds ahead of time the synths should be triggered. This represents the amount of time between pressing 'Run' and hearing audio. A larger time gives the system more room to work with and can reduce performance issues in playing fast sections on slower platforms. However, a larger time also increases latency between modifying code and hearing the result whilst live coding.",
  "set_volume!": "Set the main system volume to `vol`. Accepts a value between `0` and `5` inclusive. Vols greater or smaller than the allowed values are trimmed to keep them within range. Default is `1`.",
  "status": "This returns a Hash of information about the synthesis environment. Mostly used for debugging purposes.",
  "synth": "Trigger specified synth with given opts. Bypasses `current_synth` value, yet still honours `current_synth_defaults`. When using `synth`, the note is no longer an explicit argument but an opt with the key `note:`.\n",
  "synth_names": "Return a list of all the synths available",
  "use_arg_bpm_scaling": "Turn synth argument bpm scaling on or off for the current thread. This is on by default. Note, using `rt` for args will result in incorrect times when used after turning arg bpm scaling off.",
  "use_arg_checks": "When triggering synths, each argument is checked to see if it is sensible. When argument checking is enabled and an argument isn't sensible, you'll see an error in the debug pane. This setting allows you to explicitly enable and disable the checking mechanism. See with_arg_checks for enabling/disabling argument checking only for a specific `do`/`end` block.",
  "use_cent_tuning": "Uniformly tunes your music by shifting all notes played by the specified number of cents. To shift up by a cent use a cent tuning of 1. To shift down use negative numbers. One semitone consists of 100 cents.\n",
  "use_debug": "Enable or disable messages created on synth triggers. If this is set to false, the synths will be silent until debug is turned back on. Silencing debug messages can reduce output noise and also increase performance on slower platforms. See `with_debug` for setting the debug value only for a specific `do`/`end` block.",
  "use_merged_sample_defaults": "Specify new default values to be used by all subsequent calls to `sample`. Merges the specified values with any previous defaults, rather than replacing them.",
  "use_merged_synth_defaults": "Specify synth arg values to be used by any following call to play. Merges the specified values with any previous defaults, rather than replacing them.",
  "use_octave": "Transposes your music by shifting all notes played by the specified number of octaves. To shift up by an octave use a transpose of 1. To shift down use negative numbers. See `with_octave` for setting the octave shift only for a specific `do`/`end` block. For transposing the notes within the octave range see `use_transpose`.",
  "use_sample_bpm": "Modify bpm so that sleeping for 1 will sleep for the duration of the sample.",
  "use_sample_defaults": "Specify new default values to be used by all subsequent calls to `sample`. Will remove and override any previous defaults.",
  "use_synth": "Switch the current synth to `synth_name`. Affects all further calls to `play`. See `with_synth` for changing the current synth only for a specific `do`/`end` block.",
  "use_synth_defaults": "Specify new default values to be used by all subsequent calls to `play`. Will remove and override any previous defaults.",
  "use_transpose": "Transposes your music by shifting all notes played by the specified amount. To shift up by a semitone use a transpose of 1. To shift down use negative numbers. See `with_transpose` for setting the transpose value only for a specific `do`/`end` block. To transpose entire octaves see `use_octave`.",
  "use_tuning": "In most music we make semitones by dividing the octave into 12 equal parts, which is known as equal temperament. However there are lots of other ways to tune the 12 notes. This method adjusts each midi note into the specified tuning system. Because the ratios between notes aren't always equal, be careful to pick a centre note that is in the key of the music you're making for the best sound. Currently available tunings are `:just`, `:pythagorean`, `:meantone` and the default of `:equal`",
  "with_arg_bpm_scaling": "Turn synth argument bpm scaling on or off for the supplied block. Note, using `rt` for args will result in incorrect times when used within this block.",
  "with_arg_checks": "Similar to `use_arg_checks` except only applies to code within supplied `do`/`end` block. Previous arg check value is restored after block.",
  "with_cent_tuning": "Similar to `use_cent_tuning` except only applies cent shift to code within supplied `do`/`end` block. Previous cent tuning value is restored after block. One semitone consists of 100 cents. To transpose entire semitones see `with_transpose`.",
  "with_debug": "Similar to use_debug except only applies to code within supplied `do`/`end` block. Previous debug value is restored after block.",
  "with_fx": "This applies the named effect (FX) to everything within a given `do`/`end` block. Effects may take extra parameters to modify their behaviour. See FX help for parameter details.\n",
  "with_merged_sample_defaults": "Specify new default values to be used by all subsequent calls to `sample` within the `do`/`end` block.  Merges the specified values with any previous sample defaults, rather than replacing them. After the `do`/`end` block has completed, the previous sampled defaults (if any) are restored.",
  "with_merged_synth_defaults": "Specify synth arg values to be used by any following call to play within the specified `do`/`end` block. Merges the specified values with any previous synth defaults, rather than replacing them. After the `do`/`end` block has completed, previous defaults (if any) are restored.",
  "with_octave": "Transposes your music by shifting all notes played by the specified number of octaves within the specified block. To shift up by an octave use a transpose of 1. To shift down use negative numbers. For transposing the notes within the octave range see `with_transpose`.",
  "with_sample_bpm": "Block-scoped modification of bpm so that sleeping for 1 will sleep for the duration of the sample.",
  "with_sample_defaults": "Specify new default values to be used by all subsequent calls to `sample` within the `do`/`end` block. After the `do`/`end` block has completed, the previous sampled defaults (if any) are restored. For the contents of the block, will remove and override any previous defaults.",
  "with_synth": "Switch the current synth to `synth_name` but only for the duration of the `do`/`end` block. After the `do`/`end` block has completed, the previous synth is restored.",
  "with_synth_defaults": "Specify new default values to be used by all calls to `play` within the `do`/`end` block. After the `do`/`end` block has completed the previous synth defaults (if any) are restored.",
  "with_timing_guarantees": "For the given block, if set to true, synths will not trigger if it is too late. If false, some synth triggers may be late. After the block has completed, the previous value is restored. ",
  "with_transpose": "Similar to use_transpose except only applies to code within supplied `do`/`end` block. Previous transpose value is restored after block. To transpose entire octaves see `with_octave`.",
  "with_tuning": "Similar to use_tuning except only applies to code within supplied `do`/`end` block. Previous tuning value is restored after block."
}
#\#/#\#/#\#/#\#/#\#/#\#/#\#/#\#/#\#/#\#/

opts_doc = {
  "invert": "Apply the specified num inversions to chord. See the fn `chord_invert`.",
  "num_beats": "The number of beats within the sample. By default this is 1.",
  "num_octaves": "The number of octaves you'd like the scale to consist of. More octaves means a larger scale. Default is 1.",
  "octave": "The octave of the note. Overrides any octave declaration in the note symbol such as :c2. Default is 4",
  "pre_amp": "Controls the amplitude of the signal prior to the FX stage of the mixer (prior to lpf/hpf stages). Has slide opts. Default 1.",
  "reps": "Number of times to repeat the block in an iteration."
}
